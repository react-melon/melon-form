{"version":3,"sources":["util/dataPathMap.js"],"names":["make","remove","move","splice","swap","setInWithPath","obj","prefix","map","dataPath","value","isArray","Object","keys","reduce","nextMap","key","from","to","replace","add","nodes","node","pointer","arr","start","deleteCount","replacements","replaceCount","length","i","len","fromKey","toKey","callback","path","toModifyKeyMap","item","index","currentPath","slice","currentDataPath"],"mappings":"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","file":"dataPathMap.js","sourcesContent":["/**\n * @file data path map\n * @author leon <ludafa@outlook.com>\n */\n\nimport {walk} from './dataPath';\nimport startsWith from 'lodash/startsWith';\nimport toPath from 'lodash/toPath';\nimport {compilePath} from './dataPath';\n\nexport function make(obj, prefix = '') {\n\n    const map = {};\n\n    walk(obj, (dataPath, value, isArray) => {\n\n        if (isArray) {\n            dataPath = `${prefix}${dataPath}`;\n        }\n        else if (prefix) {\n            dataPath = `${prefix}.${dataPath}`;\n        }\n\n        map[dataPath] = value;\n\n    });\n\n    return map;\n\n}\n\nexport function remove(map, prefix) {\n\n    return Object\n        .keys(map)\n        .reduce((nextMap, key) => {\n\n            if (!startsWith(key, prefix)) {\n                nextMap[key] = map[key];\n            }\n\n            return nextMap;\n\n        }, {});\n\n}\n\nexport function move(map, from, to) {\n\n    return Object\n        .keys(map)\n        .reduce((nextMap, key) => {\n\n            if (startsWith(key, from)) {\n                nextMap[key.replace(from, to)] = map[key];\n            }\n            else {\n                nextMap[key] = map[key];\n            }\n\n            return nextMap;\n\n        }, {});\n\n}\n\nfunction add(map, prefix, ...nodes) {\n\n    return nodes\n        .reduce((map, node) => {\n\n            return {\n                ...map,\n                ...make(node, prefix)\n            };\n\n        }, map);\n\n}\n\nexport function splice(\n    map, pointer,\n    arr, start, deleteCount, replacements\n) {\n\n    const replaceCount = replacements.length;\n\n    // 删除\n    for (let i = 0; i < deleteCount; i++) {\n        map = remove(map, `${pointer}[${start + i}]`);\n    }\n\n    // 移动\n    if (deleteCount < replaceCount) {\n        for (let i = arr.length - start - deleteCount - 1; i >= 0; i--) {\n            let from = start + deleteCount + i;\n            let to = start + replacements.length + i;\n            map = move(map, `${pointer}[${from}]`, `${pointer}[${to}]`);\n        }\n    }\n    else if (deleteCount > replaceCount) {\n        for (\n            let i = 0, len = arr.length - start - deleteCount;\n            i < len;\n            i++\n        ) {\n            let from = start + deleteCount + i;\n            let to = start + replacements.length + i;\n            map = move(map, `${pointer}[${from}]`, `${pointer}[${to}]`);\n        }\n    }\n\n\n    // 添加\n    for (let i = 0, len = replacements.length; i < len; i++) {\n        map = add(map, `${pointer}[${start + i}]`, replacements[i]);\n    }\n\n    return map;\n\n}\n\nexport function swap(map, dataPath, from, to) {\n\n    return Object\n        .keys(map)\n        .reduce((nextMap, key) => {\n\n            let fromKey = `${dataPath}[${from}]`;\n            let toKey = `${dataPath}[${to}]`;\n\n            if (startsWith(key, fromKey)) {\n                nextMap[key] = map[key.replace(fromKey, toKey)];\n            }\n            else if (startsWith(key, toKey)) {\n                nextMap[key] = map[key.replace(toKey, fromKey)];\n            }\n            else {\n                nextMap[key] = map[key];\n            }\n\n            return nextMap;\n\n        }, {});\n\n}\n\nexport function setInWithPath(map, dataPath, callback) {\n\n    const path = toPath(dataPath);\n    const toModifyKeyMap = path\n        .reduce((nextMap, item, index, path) => {\n\n            const currentPath = path.slice(0, index + 1);\n            const currentDataPath = compilePath(currentPath);\n\n            nextMap[currentDataPath] = typeof callback === 'function'\n                ? callback(map[currentDataPath], currentDataPath)\n                : callback;\n\n            return nextMap;\n\n        }, {});\n\n    return Object\n        .keys(map)\n        .reduce((nextMap, key) => {\n            nextMap[key] = key in toModifyKeyMap ? toModifyKeyMap[key] : map[key];\n            return nextMap;\n        }, {});\n\n}\n"]}