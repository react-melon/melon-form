{"version":3,"sources":["/src/reducers/array.js"],"names":["arraySwap","arrayPush","arrayPop","arrayShift","arrayUnshift","arraySplice","state","action","payload","name","from","to","value","$apply","currentValue","slice","meta","data","touched","elements","currentLength","length","nextValue","$set","reduce","element","i","start","deleteCount","replacements"],"mappings":"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","file":"array.js","sourcesContent":["/**\n * @file array field reducer\n * @author leon <ludafa@outlook.com>\n */\n\nimport update from 'react-addons-update';\nimport mapValues from 'lodash/mapValues';\nimport {DEFAULT_META} from '../constants';\n\nimport {\n    setInWithPath,\n    swap,\n    make,\n    remove,\n    splice\n} from '../util/dataPathMap';\n\nimport {\n    getIn,\n    setIn\n} from '../util/dataPath';\n\nexport function arraySwap(state, action) {\n\n    let {name, from, to} = action.payload;\n\n    if (from === to) {\n        return state;\n    }\n\n    return update(state, {\n        value: {\n            $apply(value) {\n                if (from > to) {\n                    [from, to] = [to, from];\n                }\n\n                let currentValue = getIn(value, name);\n\n                return setIn(value, name, [\n                    ...currentValue.slice(0, from),\n                    currentValue[to],\n                    ...currentValue.slice(from + 1, to),\n                    currentValue[from],\n                    ...currentValue.slice(to + 1)\n                ]);\n            }\n        },\n        meta: {\n            $apply(meta) {\n                return setInWithPath(\n                    swap(meta, name, from, to),\n                    name,\n                    data => ({...data, touched: true})\n                );\n            }\n        }\n    });\n\n}\n\nexport function arrayPush(state, action) {\n\n    let {name, elements} = action.payload;\n\n    let {\n        value,\n        meta\n    } = state;\n\n    let currentValue = getIn(value, name) || [];\n    let currentLength = currentValue.length;\n    let nextValue = setIn(\n        value,\n        name,\n        [...currentValue, ...elements]\n    );\n\n    return update(state, {\n        value: {\n            $set: nextValue\n        },\n        meta: {\n            $set: elements.reduce((meta, element, i) => {\n\n                return {\n                    ...meta,\n                    ...mapValues(\n                        make(\n                            element,\n                            `${name}[${currentLength + i}]`\n                        ),\n                        () => DEFAULT_META\n                    )\n                };\n\n            }, meta)\n        }\n    });\n\n}\n\nexport function arrayPop(state, action) {\n\n    let name = action.payload.name;\n\n    let {\n        value,\n        meta\n    } = state;\n\n    let currentValue = getIn(value, name);\n    let nextValue = setIn(value, name, currentValue.slice(0, -1));\n\n    return update(state, {\n        value: {\n            $set: nextValue\n        },\n        meta: {\n            $set: remove(\n                meta,\n                `${name}[${currentValue.length - 1}]`\n            )\n        }\n    });\n\n}\n\nexport function arrayShift(state, action) {\n\n    let name = action.payload.name;\n\n    let {\n        value,\n        meta\n    } = state;\n\n    let currentValue = getIn(value, name);\n    let nextValue = setIn(value, name, currentValue.slice(1));\n\n    return update(state, {\n        value: {\n            $set: nextValue\n        },\n        meta: {\n            $set: splice(\n                meta, name,\n                currentValue, 0, 1, []\n            )\n        }\n    });\n\n}\n\nexport function arrayUnshift(state, action) {\n\n    let {name, elements} = action.payload;\n\n    let {\n        value,\n        meta\n    } = state;\n\n    let currentValue = getIn(value, name);\n    let nextValue = setIn(\n        value,\n        name,\n        [...elements, ...currentValue]\n    );\n\n    return update(state, {\n        value: {\n            $set: nextValue\n        },\n        meta: {\n            $set: splice(\n                meta, name,\n                currentValue, 0, 0, elements\n            )\n        }\n    });\n\n}\n\nexport function arraySplice(state, action) {\n\n    let {\n        name,\n        start,\n        deleteCount,\n        replacements\n    } = action.payload;\n\n    let {\n        value,\n        meta\n    } = state;\n\n    let currentValue = getIn(value, name);\n    let nextValue = setIn(\n        value,\n        name,\n        [\n            ...currentValue.slice(0, start),\n            ...replacements,\n            ...currentValue.slice(start + deleteCount)\n        ]\n    );\n\n    return update(state, {\n        value: {\n            $set: nextValue\n        },\n        meta: {\n            $set: splice(\n                meta, name,\n                currentValue, start, deleteCount, replacements\n            )\n        }\n    });\n\n}\n"]}