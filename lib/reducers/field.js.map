{"version":3,"sources":["/src/reducers/field.js"],"names":["focus","blur","touch","change","updateValidity","register","unregister","setValidateStart","setValidateSucceed","setValidateFailed","startPending","stopPending","fillMeta","state","action","name","payload","meta","$apply","data","touched","value","nextValue","$set","validity","Object","keys","reduce","nextMeta","key","error","validating","pending","target"],"mappings":"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","file":"field.js","sourcesContent":["/**\n * @file field reducer\n * @author leon <ludafa@outlook.com>\n */\n\nimport update from 'react-addons-update';\nimport {setInWithPath} from '../util/dataPathMap';\nimport {getIn, setIn, deleteIn} from '../util/dataPath';\nimport {DEFAULT_META} from '../constants';\n\nexport function focus(state, action) {\n\n    let name = action.payload.name;\n\n    return update(state, {\n        meta: {\n            [name]: {\n                $apply(meta = DEFAULT_META) {\n                    return {\n                        ...meta,\n                        focus: true\n                    };\n                }\n            }\n        }\n    });\n\n}\n\nexport function blur(state, action) {\n\n    let name = action.payload.name;\n\n    return update(state, {\n        meta: {\n            [name]: {\n                $apply(meta = DEFAULT_META) {\n                    return {\n                        ...meta,\n                        focus: false\n                    };\n                }\n            }\n        }\n    });\n\n}\n\nexport function touch(state, action) {\n\n    let name = action.payload.name;\n\n    return update(state, {\n        meta: {\n            $apply(meta) {\n                return setInWithPath(\n                    meta || DEFAULT_META,\n                    name,\n                    data => ({\n                        ...data,\n                        touched: true\n                    })\n                );\n            }\n        }\n    });\n}\n\nexport function change(state, action) {\n\n    let {name, value} = action.payload;\n\n    if (getIn(state.value) === value) {\n        return state;\n    }\n\n    const nextValue = setIn(\n        state.value,\n        name,\n        value\n    );\n\n    return update(state, {\n        meta: {\n            $apply(meta) {\n                return setInWithPath(\n                    meta || DEFAULT_META,\n                    name,\n                    data => ({\n                        ...data,\n                        touched: true\n                    })\n                );\n            }\n        },\n        value: {\n            $set: nextValue\n        }\n    });\n\n}\n\nexport function updateValidity(state, action) {\n\n    let validity = action.payload.validity;\n\n    return update(state, {\n        meta: {\n            $apply(meta) {\n                return Object\n                    .keys(meta)\n                    .reduce((nextMeta, key) => {\n\n                        nextMeta[key] = {\n                            ...DEFAULT_META,\n                            ...meta[key],\n                            error: validity && validity[key] || ''\n                        };\n\n                        return nextMeta;\n\n                    }, {});\n            }\n        }\n    });\n\n}\n\nexport function register(state, action) {\n\n    return update(state, {\n        meta: {\n            [action.payload.name]: {\n                $set: DEFAULT_META\n            }\n        }\n    });\n\n}\n\nexport function unregister(state, action) {\n    return update(state, {\n        meta: {\n            $apply(meta) {\n                return deleteIn(meta, action.payload.name);\n            }\n        }\n    });\n}\n\nexport function setValidateStart(state, action) {\n\n    let name = action.payload.name;\n\n    return update(state, {\n\n        meta: {\n            $apply(meta) {\n\n                return Object\n                    .keys(meta)\n                    .reduce((nextMeta, key) => {\n\n                        nextMeta[key] = {\n                            ...DEFAULT_META,\n                            ...meta[key],\n\n                            // 不指定 name 或者等于指定 name\n                            validating: (!name || key === name),\n\n                            // 如果是 form validate 即无 name，那么同步校验已通过，error 设置为 null\n                            // 如果是 field validate 即有 name，指定 name 的要保留，否则清空\n                            error: name === key ? null : meta[key].error\n                        };\n\n                        return nextMeta;\n\n                    }, {});\n\n            }\n        }\n\n    });\n\n}\n\nexport function setValidateSucceed(state, action) {\n\n    let name = action.payload.name;\n\n    return name\n        ? update(state, {\n            meta: {\n                [name]: {\n                    $apply(meta = DEFAULT_META) {\n                        return {\n                            ...meta,\n                            validating: false,\n                            error: null\n                        };\n                    }\n                }\n            }\n        })\n        : update(state, {\n            meta: {\n                $apply(meta) {\n\n                    return Object\n                        .keys(meta)\n                        .reduce((nextMeta, key) => {\n\n                            nextMeta[key] = {\n                                ...DEFAULT_META,\n                                ...meta[key],\n                                validating: false,\n                                error: null\n                            };\n\n                            return nextMeta;\n\n                        }, {});\n\n                }\n            }\n        });\n}\n\nexport function setValidateFailed(state, action) {\n\n    let {name, error} = action.payload;\n\n    return name\n        ? update(state, {\n            meta: {\n                [name]: {\n                    $apply(meta = DEFAULT_META) {\n                        return {\n                            ...meta,\n                            validating: false,\n                            error\n                        };\n                    }\n                }\n            }\n        })\n        : update(state, {\n            meta: {\n                $apply(meta) {\n\n                    return Object\n                        .keys(meta)\n                        .reduce((nextMeta, key) => {\n\n                            nextMeta[key] = {\n                                ...DEFAULT_META,\n                                ...meta[key],\n                                validating: false,\n                                error\n                            };\n\n                            return nextMeta;\n\n                        }, {});\n\n                }\n            }\n        });\n\n}\n\nexport function startPending(state, action) {\n    return update(state, {\n        meta: {\n            [action.payload.name]: {\n                $apply(meta = DEFAULT_META) {\n                    return {\n                        ...meta,\n                        pending: true\n                    };\n                }\n            }\n        }\n    });\n}\n\nexport function stopPending(state, action) {\n    return update(state, {\n        meta: {\n            [action.payload.name]: {\n                $apply(meta = DEFAULT_META) {\n                    return {\n                        ...meta,\n                        pending: false\n                    };\n                }\n            }\n        }\n    });\n}\n\nexport function fillMeta(state, action) {\n\n    let {\n        name,\n        meta\n    } = action.payload;\n\n    return update(state, {\n        meta: {\n            [name]: {\n                $apply(target = DEFAULT_META) {\n                    return {\n                        ...target,\n                        ...meta\n                    };\n                }\n            }\n        }\n    });\n\n}\n"]}