{"version":3,"sources":["createActionCreators.js"],"names":["types","selectors","createEventMeta","name","type","event","handler","getEvent","state","value","memoizedActions","memoizedProps","props","model","initialize","INITIALIZE","payload","updateValidity","validity","VALIDITY_UPDATE","validate","origin","dispatch","getState","noValidate","store","getModel","tasks","length","promises","map","task","ASYNC_VALIDATE_START","then","ASYNC_VALIDATE_SUCCEED","ASYNC_VALIDATE_FAILED","error","Promise","all","results","reduce","result","index","errors","touchAll","TOUCH_ALL","submit","callback","onValidateFinish","getValue","reset","RESET","focus","FOCUS","change","CHANGE","meta","blur","BLUR","touch","TOUCH","arrayPush","elements","ARRAY_PUSH","arraySplice","start","deleteCount","replacements","ARRAY_SPLICE","arraySwap","from","to","ARRAY_SWAP","register","REGISTER","unregister","UNREGISTER","startPending","PENDING_START","stopPending","PENDING_STOP"],"mappings":"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","file":"createActionCreators.js","sourcesContent":["/**\n * @file action creators factory\n * @author leon <ludafa@outlook.com>\n */\n\nimport * as types from './actionTypes';\nimport {isValid, resolveAsyncTasks} from './util/validity';\nimport * as selectors from './selectors';\n\nfunction createEventMeta(name, type) {\n\n    return {\n        event: {\n            handler: type,\n            getEvent(state) {\n                return {\n                    name,\n                    value: state.value\n                };\n            }\n        }\n    };\n\n}\n\nexport default (() => {\n\n    let memoizedActions;\n    let memoizedProps;\n\n    return props => {\n\n        if (memoizedActions && props === memoizedProps) {\n            return memoizedActions;\n        }\n\n        let model = props.model;\n\n        function initialize() {\n            return {\n                type: types.INITIALIZE,\n                payload: {model}\n            };\n        }\n\n        function updateValidity(validity) {\n            return {\n                type: types.VALIDITY_UPDATE,\n                payload: {validity, model}\n            };\n        }\n\n        function validate(origin) {\n\n            return (dispatch, getState) => {\n\n                let validate = props.validate;\n\n                if (props.noValidate || !validate) {\n                    return;\n                }\n\n                let store = getState();\n\n                let validity = validate(\n                    selectors.getModel(store, model),\n                    props,\n                    origin\n                );\n\n                // 找出所有的异步校验\n                let tasks = resolveAsyncTasks(validity);\n\n                // 如果没有异步校验任务，那么就直接更新校验数据即可\n                if (!tasks.length) {\n                    dispatch(updateValidity(validity));\n                    return validity;\n                }\n\n                // 找到所有的 async validate task\n                // 对每个 task 做处理\n                // 1. 立即触发 async_validate_start\n                // 2. 绑定执行完成处理 async_validate_succeed / failed\n\n                let promises = tasks\n                    .map(({name, task}) => {\n\n                        dispatch({\n                            type: types.ASYNC_VALIDATE_START,\n                            payload: {name, model}\n                        });\n\n                        return task.then(\n                            () => {\n                                dispatch({\n                                    type: types.ASYNC_VALIDATE_SUCCEED,\n                                    payload: {\n                                        name,\n                                        model\n                                    }\n                                });\n                            },\n                            error => {\n                                dispatch({\n                                    type: types.ASYNC_VALIDATE_FAILED,\n                                    payload: {\n                                        name,\n                                        error,\n                                        model\n                                    }\n                                });\n                            }\n                        );\n\n                    });\n\n                return Promise.all(promises).then(\n                    results => results.reduce(\n                        (validity, result, index) => {\n                            validity[tasks[index].name] = null;\n                            return validity;\n                        },\n                        {\n                            ...validity\n                        }\n                    ),\n                    errors => errors.reduce(\n                        (validity, result, index) => {\n                            validity[tasks[index].name] = result;\n                            return validity;\n                        },\n                        {\n                            ...validity\n                        }\n                    )\n                );\n\n            };\n\n\n        }\n\n        function touchAll() {\n            return {\n                type: types.TOUCH_ALL,\n                payload: {model}\n            };\n        }\n\n        function submit(callback) {\n\n            return (dispatch, getState) => {\n\n                let state = getState();\n\n                function onValidateFinish(validity) {\n\n                    if (isValid(validity)) {\n                        callback && callback(selectors.getValue(state, model));\n                    }\n\n                }\n\n                dispatch(touchAll());\n\n                let validity = dispatch(validate());\n\n                validity instanceof Promise\n                    ? validity.then(onValidateFinish)\n                    : onValidateFinish(validity);\n\n            };\n\n        }\n\n        function reset() {\n            return {\n                type: types.RESET,\n                payload: {model}\n            };\n        }\n\n        function focus(name) {\n            return {\n                type: types.FOCUS,\n                payload: {name, model}\n            };\n        }\n\n        function change(name, value) {\n            return {\n                type: types.CHANGE,\n                payload: {\n                    name,\n                    value,\n                    model\n                },\n                meta: createEventMeta(name, 'onFieldChange')\n            };\n        }\n\n        function blur(name) {\n\n            return (dispatch, getState) => {\n\n                dispatch({\n                    type: types.BLUR,\n                    payload: {name, model}\n                });\n\n                return dispatch(validate(name));\n\n            };\n\n        }\n\n        function touch(name) {\n            return {\n                type: types.TOUCH,\n                payload: {name, model}\n            };\n        }\n\n        function arrayPush(name, ...elements) {\n\n            return {\n                type: types.ARRAY_PUSH,\n                payload: {\n                    name,\n                    elements,\n                    model\n                },\n                meta: createEventMeta(name, 'onFieldChange')\n            };\n\n        }\n\n        function arraySplice(\n            name,\n            start,\n            deleteCount,\n            ...replacements\n        ) {\n\n            return {\n                type: types.ARRAY_SPLICE,\n                payload: {\n                    name,\n                    start,\n                    deleteCount,\n                    replacements,\n                    model\n                },\n                meta: createEventMeta(name, 'onFieldChange')\n            };\n\n        }\n\n        function arraySwap(name, from, to) {\n\n            return {\n                type: types.ARRAY_SWAP,\n                payload: {\n                    from,\n                    to,\n                    name,\n                    model\n                },\n                meta: createEventMeta(name, 'onFieldChange')\n            };\n\n        }\n\n        function register(name) {\n            return {\n                type: types.REGISTER,\n                payload: {name, model}\n            };\n        }\n\n        function unregister(name) {\n            return {\n                type: types.UNREGISTER,\n                payload: {name, model}\n            };\n        }\n\n        function startPending(name) {\n            return {\n                type: types.PENDING_START,\n                payload: {name, model}\n            };\n        }\n\n        function stopPending(name) {\n            return {\n                type: types.PENDING_STOP,\n                payload: {name, model}\n            };\n        }\n\n        memoizedActions = {\n\n            // form\n            initialize,\n            submit,\n            reset,\n            touchAll,\n\n            // form & field\n            validate,\n\n            // field\n            register,\n            unregister,\n            focus,\n            change,\n            blur,\n            touch,\n            startPending,\n            stopPending,\n\n            // array field\n            arrayPush,\n            arraySplice,\n            arraySwap\n        };\n\n        return memoizedActions;\n\n    };\n\n\n})();\n"]}